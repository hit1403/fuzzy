
import numpy as np
import matplotlib.pyplot as plt

speed = 100
acceleration = 70

def fulltrap(x,a,b,c,d):
    return max(min((x-a)/(b-a),1,(d-x)/(d-c)),0)

def triangular(x,a,b,c):
    return max(min((x-a)/(b-a),(c-x)/(c-b)),0)

def partition(x):
    NL = 0
    NM = 0
    NS = 0
    ZE= 0
    PS= 0
    PM= 0
    PL= 0
    
    if x>0 and x<63:
        NL = fulltrap(x, 0, 0, 31, 63)
    if x>31 and x<95:
        NM = triangular(x,31, 63,95)
    if x>63 and x<127:
        NS = triangular(x,63,95,127)
    if x>95 and x<159:
        ZE = triangular(x,95,127,159)
    if x>127 and x<191:
        PS = triangular(x, 127, 159, 191)
    if x>159 and x<223:
        PM = triangular(x, 159,191, 223)
    if x>191 and x<255:
        PL = fulltrap(x, 191, 223,255,255)
        
    return NL,NM ,NS ,ZE,PS,PM,PL

def rule(NLSD,NMSD ,NSSD ,ZESD,PSSD,PMSD,PLSD,  NLAC,NMAC ,NSAC ,ZEAC,PSAC,PMAC,PLAC):
    
    PLTC1 = min(NLSD,ZEAC)
    PLTC2 = min(ZESD,NLAC)
    PLTC = max(PLTC1,PLTC2)
    
    PMTC1=min(NMSD,ZEAC)
    PMTC2=min(ZESD,NMAC)
    PMTC=max(PMTC1,PMTC2)
   
    PSTC1=min(NSSD,PSAC)
    PSTC2=min(ZESD,NSAC)
    PSTC=max(PSTC1, PSTC2)
   
    NSTC=min(PSSD,NSAC)
    NLTC=min(PLSD,ZEAC)
   
    return PLTC,PMTC,PSTC,NSTC,NLTC

def areaTR(mu,a,b,c):
    x1 = (b-a)*mu + a
    x2 = c- (c-b)*mu
    d1 = c-a
    d2 = x2-x1
    return [0.5*mu*(d1+d2),x1,x2]

    
def areaFullTrap(h,a,b,c,d):
    x1 = (b-a)*h + a
    x2 = d - (d-c)*h
    d1 = d-a
    d2 = x2-x1
    return [0.5*h*(d1+d2),x1,x2]
plotting = []
def defuzzyfication(PLTC,PMTC,PSTC,NSTC,NLTC):
    areaPL=0
    areaPM=0
    areaPS=0
    areaNS=0
    areaNL=0
   
    cPL=0
    cPM=0
    cPS=0
    cNS=0
    cNL=0
   
    if PLTC!=0:
        areaPL,x1,x2=areafullTrap(PLTC, 191,223,255, 255)
        cPL = (255-191)/2
        plotting.append([PLTC,x1,x2])
    if PMTC!=0:
        areaPM,x1,x2=areaTR(PMTC, 159, 191, 223)
        cPM=191
        plotting.append([PMTC,x1,x2])
    if PSTC!=0:
        areaPS,x1,x2=areaTR(PSTC, 127, 159, 191)
        cPS=159
        plotting.append([PSTC,x1,x2])
    if NSTC != 0:
        areaNS,x1,x2 = areaTR(NSTC, 61, 95, 127)
        cNS = 95
        plotting.append([NSTC,x1,x2])
    
    if NLTC !=0:
        areaNL= areafullTrap(NLTC, 0,0,31, 61)
        cNL = (61 - 0)/2 
        plotting.append([NLTC,x1,x2])
    print(cPL,cNL)
       
    numerator = areaPL*cPL + areaPM*cPM + areaPS*cPS + areaNS*cNS + areaNL*cNL
    denominator = areaPL + areaPM + areaPS + areaNS + areaNL
    if denominator ==0:
        print("No rules exist to give the result")
        return 0
    else:
        print("plotting: ",plotting)
        crispOutput = numerator/denominator
        return crispOutput
    

NLSD,NMSD,NSSD,ZESD,PSSD,PMSD,PLSD=partition(speed)
NLAC,NMAC,NSAC,ZEAC,PSAC,PMAC,PLAC=partition(acceleration)

output=[[NLSD,NMSD,NSSD,ZESD,PSSD,PMSD,PLSD],[NLAC,NMAC,NSAC,ZEAC,PSAC,PMAC,PLAC]]

print(np.round(output,2))

PLTC,PMTC,PSTC,NSTC,NLTC = rule(NLSD,NMSD,NSSD,ZESD,PSSD,PMSD,PLSD,NLAC,NMAC,NSAC,ZEAC,PSAC,PMAC,PLAC) 
        
print(defuzzyfication(PLTC, PMTC, PSTC, NSTC, NLTC))

x = [0,31,63,95,127,159,191,223,255]

plt.plot(x[:3],[1,1,0])
for i in range(1,len(x)-3):
    plt.plot(x[i:i+3],[0,1,0])
plt.plot(x[-3:],[0,1,1])

for j in range(len(plotting)):
    y, start_x, end_x = plotting[j]  # Extracting y value, start_x, and end_x
    x_values = np.arange(start_x, end_x + 0.001, 0.001)  # Generate x values from start_x to end_x
    y_values = [y] * len(x_values)  # Generating y values (same for all x values)
    plt.plot(x_values, y_values)
    
plt.show()
